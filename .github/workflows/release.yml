name: Build and Upload Binaries

on:
  release:
    types: [created]

jobs:
  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

  build-and-upload:
    name: Build for ${{ matrix.os }} / ${{ matrix.target }}
    # Updated dependencies to only need prepare-version
    needs: [set-version]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (64-bit) - using musl for static linking
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: port-claim-linux-x64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            asset_name: port-claim-linux-arm64.tar.gz
          # Linux builds (32-bit) - using musl for static linking 
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            asset_name: port-claim-linux-x86.tar.gz
          # macOS builds  
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: port-claim-mac-x64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: port-claim-mac-arm64.tar.gz
          # Windows builds (64-bit)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: port-claim-windows-x64.tar.gz
          # Windows builds (32-bit)
          - os: windows-latest
            target: i686-pc-windows-msvc
            asset_name: port-claim-windows-x86.tar.gz

    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl tools (Linux)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Setup cross-compilation for ARM64 Linux
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # Check formatting (platform independent)
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      # Lint with clippy
      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.target, 'aarch64-unknown-linux') || contains(matrix.target, 'i686-unknown-linux') }}
          command: clippy
          args: -- -D warnings
        env:
          TARGET: ${{ matrix.target }}

      # Build the binary first
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.target, 'aarch64-unknown-linux') || contains(matrix.target, 'i686-unknown-linux') }}
          command: build
          args: --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}
          
      # Run tests using the simple path in the test file
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          TARGET: ${{ matrix.target }}

      # Now build release version
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.target, 'aarch64-unknown-linux') || contains(matrix.target, 'i686-unknown-linux') }}
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Prepare archive
        shell: bash
        run: |
          # Define binary name with extension if Windows
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BIN_NAME="port-claim.exe"
          else
            BIN_NAME="port-claim"
          fi
          
          # Create directory for the archive with a nested directory structure
          # binary-install uses strip:1 when extracting, so we need to create a directory structure
          mkdir -p release-archive/port-claim
          
          # Copy binary to the nested directory
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/$BIN_NAME release-archive/port-claim/
          else
            cp target/${{ matrix.target }}/release/$BIN_NAME release-archive/port-claim/
            chmod +x release-archive/port-claim/$BIN_NAME
          fi
          
          # Create tar.gz archive - now with the nested directory structure
          cd release-archive
          tar czf ../${{ matrix.asset_name }} port-claim
          cd ..

      # Upload to the current release
      - name: Upload binary to current release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Get latest release and upload to it
      - name: Get latest release
        id: latest_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          
      - name: Upload binary to latest release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.latest_release.outputs.tag_name }}
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 